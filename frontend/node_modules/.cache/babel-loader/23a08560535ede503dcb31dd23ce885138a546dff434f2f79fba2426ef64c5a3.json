{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USUARIO\\\\Desktop\\\\Nova\\\\chtgpt\\\\Momentum\\\\frontend\\\\src\\\\components\\\\ProgressTree.js\";\nimport React from 'react';\nimport seed from '../images/progress/seed.png';\nimport sapling from '../images/progress/sapling.png';\nimport youngTree from '../images/progress/young_tree.png';\nimport tree from '../images/progress/tree.png';\nimport '../styles/mobile.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressTree = ({\n  habits = []\n}) => {\n  // Si habits no es un array, devolver un mensaje de error\n  if (!Array.isArray(habits)) {\n    console.error('Expected habits to be an array but got:', habits);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: \"Hubo un error al cargar los h\\xE1bitos. Por favor, int\\xE9ntalo de nuevo m\\xE1s tarde.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Si habits está vacío, mostrar un mensaje para crear hábitos\n  if (habits.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-tree-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No hay h\\xE1bitos disponibles. \\xA1Crea uno para empezar!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 57\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Calcular el progreso de un hábito\n  const calculateProgress = habit => {\n    return habit.progress || 0; // Puedes ajustar esto según cómo almacenes el progreso\n  };\n\n  // Obtener la imagen del árbol según el progreso\n  const getTreeImage = progress => {\n    if (progress < 25) {\n      return seed;\n    } else if (progress < 50) {\n      return sapling;\n    } else if (progress < 75) {\n      return youngTree;\n    } else {\n      return tree;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"progress-tree-container\",\n    children: habits.map(habit => {\n      const progress = calculateProgress(habit);\n      const treeImage = getTreeImage(progress);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-tree\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: treeImage,\n          alt: \"Tree progress\",\n          className: \"tree-image\",\n          style: {\n            width: '80px',\n            height: 'auto'\n          } // Ajuste de tamaño para mejorar la UX\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: habit.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this)]\n      }, habit._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_c = ProgressTree;\nexport default ProgressTree;\nvar _c;\n$RefreshReg$(_c, \"ProgressTree\");","map":{"version":3,"names":["React","seed","sapling","youngTree","tree","jsxDEV","_jsxDEV","ProgressTree","habits","Array","isArray","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","calculateProgress","habit","progress","getTreeImage","map","treeImage","src","alt","style","width","height","name","_id","_c","$RefreshReg$"],"sources":["C:/Users/USUARIO/Desktop/Nova/chtgpt/Momentum/frontend/src/components/ProgressTree.js"],"sourcesContent":["import React from 'react';\r\nimport seed from '../images/progress/seed.png';\r\nimport sapling from '../images/progress/sapling.png';\r\nimport youngTree from '../images/progress/young_tree.png';\r\nimport tree from '../images/progress/tree.png';\r\nimport '../styles/mobile.css';\r\n\r\nconst ProgressTree = ({ habits = [] }) => {\r\n    // Si habits no es un array, devolver un mensaje de error\r\n    if (!Array.isArray(habits)) {\r\n        console.error('Expected habits to be an array but got:', habits);\r\n        return <div className=\"error-message\">Hubo un error al cargar los hábitos. Por favor, inténtalo de nuevo más tarde.</div>;\r\n    }\r\n\r\n    // Si habits está vacío, mostrar un mensaje para crear hábitos\r\n    if (habits.length === 0) {\r\n        return <div className=\"progress-tree-container\"><p>No hay hábitos disponibles. ¡Crea uno para empezar!</p></div>;\r\n    }\r\n\r\n    // Calcular el progreso de un hábito\r\n    const calculateProgress = (habit) => {\r\n        return habit.progress || 0; // Puedes ajustar esto según cómo almacenes el progreso\r\n    };\r\n\r\n    // Obtener la imagen del árbol según el progreso\r\n    const getTreeImage = (progress) => {\r\n        if (progress < 25) {\r\n            return seed;\r\n        } else if (progress < 50) {\r\n            return sapling;\r\n        } else if (progress < 75) {\r\n            return youngTree;\r\n        } else {\r\n            return tree;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"progress-tree-container\">\r\n            {habits.map((habit) => {\r\n                const progress = calculateProgress(habit);\r\n                const treeImage = getTreeImage(progress);\r\n\r\n                return (\r\n                    <div key={habit._id} className=\"progress-tree\">\r\n                        <img\r\n                            src={treeImage}\r\n                            alt=\"Tree progress\"\r\n                            className=\"tree-image\"\r\n                            style={{ width: '80px', height: 'auto' }} // Ajuste de tamaño para mejorar la UX\r\n                        />\r\n                        <p>{habit.name}</p>\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProgressTree;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,6BAA6B;AAC9C,OAAOC,OAAO,MAAM,gCAAgC;AACpD,OAAOC,SAAS,MAAM,mCAAmC;AACzD,OAAOC,IAAI,MAAM,6BAA6B;AAC9C,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,YAAY,GAAGA,CAAC;EAAEC,MAAM,GAAG;AAAG,CAAC,KAAK;EACtC;EACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EAAE;IACxBG,OAAO,CAACC,KAAK,CAAC,yCAAyC,EAAEJ,MAAM,CAAC;IAChE,oBAAOF,OAAA;MAAKO,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAC;IAA6E;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC7H;;EAEA;EACA,IAAIV,MAAM,CAACW,MAAM,KAAK,CAAC,EAAE;IACrB,oBAAOb,OAAA;MAAKO,SAAS,EAAC,yBAAyB;MAAAC,QAAA,eAACR,OAAA;QAAAQ,QAAA,EAAG;MAAmD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACpH;;EAEA;EACA,MAAME,iBAAiB,GAAIC,KAAK,IAAK;IACjC,OAAOA,KAAK,CAACC,QAAQ,IAAI,CAAC,CAAC,CAAC;EAChC,CAAC;;EAED;EACA,MAAMC,YAAY,GAAID,QAAQ,IAAK;IAC/B,IAAIA,QAAQ,GAAG,EAAE,EAAE;MACf,OAAOrB,IAAI;IACf,CAAC,MAAM,IAAIqB,QAAQ,GAAG,EAAE,EAAE;MACtB,OAAOpB,OAAO;IAClB,CAAC,MAAM,IAAIoB,QAAQ,GAAG,EAAE,EAAE;MACtB,OAAOnB,SAAS;IACpB,CAAC,MAAM;MACH,OAAOC,IAAI;IACf;EACJ,CAAC;EAED,oBACIE,OAAA;IAAKO,SAAS,EAAC,yBAAyB;IAAAC,QAAA,EACnCN,MAAM,CAACgB,GAAG,CAAEH,KAAK,IAAK;MACnB,MAAMC,QAAQ,GAAGF,iBAAiB,CAACC,KAAK,CAAC;MACzC,MAAMI,SAAS,GAAGF,YAAY,CAACD,QAAQ,CAAC;MAExC,oBACIhB,OAAA;QAAqBO,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC1CR,OAAA;UACIoB,GAAG,EAAED,SAAU;UACfE,GAAG,EAAC,eAAe;UACnBd,SAAS,EAAC,YAAY;UACtBe,KAAK,EAAE;YAAEC,KAAK,EAAE,MAAM;YAAEC,MAAM,EAAE;UAAO,CAAE,CAAC;QAAA;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7C,CAAC,eACFZ,OAAA;UAAAQ,QAAA,EAAIO,KAAK,CAACU;QAAI;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAPbG,KAAK,CAACW,GAAG;QAAAjB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQd,CAAC;IAEd,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACe,EAAA,GAlDI1B,YAAY;AAoDlB,eAAeA,YAAY;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}