{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USUARIO\\\\Desktop\\\\Nova\\\\chtgpt\\\\Momentum\\\\frontend\\\\src\\\\components\\\\ProgressTree.js\";\nimport React from 'react';\nimport seed from '../images/progress/seed.png';\nimport sapling from '../images/progress/sapling.png';\nimport youngTree from '../images/progress/young_tree.png';\nimport tree from '../images/progress/tree.png';\nimport forest from '../images/progress/forest.png'; // Imagen del mundo del hábito\nimport city from '../images/progress/city.png'; // Imagen del mundo del hábito\nimport ocean from '../images/progress/ocean.png'; // Imagen del mundo del hábito\nimport '../styles/progressTree.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressTree = ({\n  habits = []\n}) => {\n  const calculateProgress = habit => {\n    return habit.progress || 0; // Calcular el progreso del hábito\n  };\n  const getTreeImage = progress => {\n    if (progress < 25) {\n      return seed;\n    } else if (progress < 50) {\n      return sapling;\n    } else if (progress < 75) {\n      return youngTree;\n    } else {\n      return tree;\n    }\n  };\n  const getWorldImage = world => {\n    switch (world) {\n      case 'forest':\n        return forest;\n      case 'city':\n        return city;\n      case 'ocean':\n        return ocean;\n      default:\n        return forest;\n      // Valor predeterminado si el mundo no está definido\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"progress-tree-container\",\n    children: habits.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No hay h\\xE1bitos disponibles. \\xA1Crea uno para empezar!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this) : habits.map(habit => {\n      const progress = calculateProgress(habit);\n      const treeImage = getTreeImage(progress);\n      const worldImage = getWorldImage(habit.world); // Asegúrate de que `habit` tenga una propiedad `world`\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-tree\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: worldImage,\n          alt: \"Habit World\",\n          className: \"world-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: treeImage,\n          alt: \"Tree progress\",\n          className: \"tree-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: habit.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }, this)]\n      }, habit._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 25\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_c = ProgressTree;\nexport default ProgressTree;\nvar _c;\n$RefreshReg$(_c, \"ProgressTree\");","map":{"version":3,"names":["React","seed","sapling","youngTree","tree","forest","city","ocean","jsxDEV","_jsxDEV","ProgressTree","habits","calculateProgress","habit","progress","getTreeImage","getWorldImage","world","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","map","treeImage","worldImage","src","alt","name","_id","_c","$RefreshReg$"],"sources":["C:/Users/USUARIO/Desktop/Nova/chtgpt/Momentum/frontend/src/components/ProgressTree.js"],"sourcesContent":["import React from 'react';\r\nimport seed from '../images/progress/seed.png';\r\nimport sapling from '../images/progress/sapling.png';\r\nimport youngTree from '../images/progress/young_tree.png';\r\nimport tree from '../images/progress/tree.png';\r\nimport forest from '../images/progress/forest.png'; // Imagen del mundo del hábito\r\nimport city from '../images/progress/city.png'; // Imagen del mundo del hábito\r\nimport ocean from '../images/progress/ocean.png'; // Imagen del mundo del hábito\r\nimport '../styles/progressTree.css';\r\n\r\nconst ProgressTree = ({ habits = [] }) => {\r\n    const calculateProgress = (habit) => {\r\n        return habit.progress || 0; // Calcular el progreso del hábito\r\n    };\r\n\r\n    const getTreeImage = (progress) => {\r\n        if (progress < 25) {\r\n            return seed;\r\n        } else if (progress < 50) {\r\n            return sapling;\r\n        } else if (progress < 75) {\r\n            return youngTree;\r\n        } else {\r\n            return tree;\r\n        }\r\n    };\r\n\r\n    const getWorldImage = (world) => {\r\n        switch (world) {\r\n            case 'forest':\r\n                return forest;\r\n            case 'city':\r\n                return city;\r\n            case 'ocean':\r\n                return ocean;\r\n            default:\r\n                return forest; // Valor predeterminado si el mundo no está definido\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"progress-tree-container\">\r\n            {habits.length === 0 ? (\r\n                <p>No hay hábitos disponibles. ¡Crea uno para empezar!</p>\r\n            ) : (\r\n                habits.map((habit) => {\r\n                    const progress = calculateProgress(habit);\r\n                    const treeImage = getTreeImage(progress);\r\n                    const worldImage = getWorldImage(habit.world); // Asegúrate de que `habit` tenga una propiedad `world`\r\n\r\n                    return (\r\n                        <div key={habit._id} className=\"progress-tree\">\r\n                            <img src={worldImage} alt=\"Habit World\" className=\"world-image\" />\r\n                            <img src={treeImage} alt=\"Tree progress\" className=\"tree-image\" />\r\n                            <p>{habit.name}</p>\r\n                        </div>\r\n                    );\r\n                })\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProgressTree;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,6BAA6B;AAC9C,OAAOC,OAAO,MAAM,gCAAgC;AACpD,OAAOC,SAAS,MAAM,mCAAmC;AACzD,OAAOC,IAAI,MAAM,6BAA6B;AAC9C,OAAOC,MAAM,MAAM,+BAA+B,CAAC,CAAC;AACpD,OAAOC,IAAI,MAAM,6BAA6B,CAAC,CAAC;AAChD,OAAOC,KAAK,MAAM,8BAA8B,CAAC,CAAC;AAClD,OAAO,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,YAAY,GAAGA,CAAC;EAAEC,MAAM,GAAG;AAAG,CAAC,KAAK;EACtC,MAAMC,iBAAiB,GAAIC,KAAK,IAAK;IACjC,OAAOA,KAAK,CAACC,QAAQ,IAAI,CAAC,CAAC,CAAC;EAChC,CAAC;EAED,MAAMC,YAAY,GAAID,QAAQ,IAAK;IAC/B,IAAIA,QAAQ,GAAG,EAAE,EAAE;MACf,OAAOb,IAAI;IACf,CAAC,MAAM,IAAIa,QAAQ,GAAG,EAAE,EAAE;MACtB,OAAOZ,OAAO;IAClB,CAAC,MAAM,IAAIY,QAAQ,GAAG,EAAE,EAAE;MACtB,OAAOX,SAAS;IACpB,CAAC,MAAM;MACH,OAAOC,IAAI;IACf;EACJ,CAAC;EAED,MAAMY,aAAa,GAAIC,KAAK,IAAK;IAC7B,QAAQA,KAAK;MACT,KAAK,QAAQ;QACT,OAAOZ,MAAM;MACjB,KAAK,MAAM;QACP,OAAOC,IAAI;MACf,KAAK,OAAO;QACR,OAAOC,KAAK;MAChB;QACI,OAAOF,MAAM;MAAE;IACvB;EACJ,CAAC;EAED,oBACII,OAAA;IAAKS,SAAS,EAAC,yBAAyB;IAAAC,QAAA,EACnCR,MAAM,CAACS,MAAM,KAAK,CAAC,gBAChBX,OAAA;MAAAU,QAAA,EAAG;IAAmD;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAE1Db,MAAM,CAACc,GAAG,CAAEZ,KAAK,IAAK;MAClB,MAAMC,QAAQ,GAAGF,iBAAiB,CAACC,KAAK,CAAC;MACzC,MAAMa,SAAS,GAAGX,YAAY,CAACD,QAAQ,CAAC;MACxC,MAAMa,UAAU,GAAGX,aAAa,CAACH,KAAK,CAACI,KAAK,CAAC,CAAC,CAAC;;MAE/C,oBACIR,OAAA;QAAqBS,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC1CV,OAAA;UAAKmB,GAAG,EAAED,UAAW;UAACE,GAAG,EAAC,aAAa;UAACX,SAAS,EAAC;QAAa;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAClEf,OAAA;UAAKmB,GAAG,EAAEF,SAAU;UAACG,GAAG,EAAC,eAAe;UAACX,SAAS,EAAC;QAAY;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAClEf,OAAA;UAAAU,QAAA,EAAIN,KAAK,CAACiB;QAAI;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAHbX,KAAK,CAACkB,GAAG;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAId,CAAC;IAEd,CAAC;EACJ;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACQ,EAAA,GAnDItB,YAAY;AAqDlB,eAAeA,YAAY;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}